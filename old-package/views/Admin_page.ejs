<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>Dashboard - White Wolf India</title>
    <link rel="stylesheet" href="/css/adminstyle.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
    <link rel="shortcut icon" type="image/x-icon" href="../assets/whitewolflog.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/canvasjs/1.7.0/canvasjs.min.js"></script>
    <style>

        .export-btn{
            background-color:green;
            padding: 1vh;
            font-size: 2vh;
            color: #fff;
            cursor: pointer;
            border-radius: 5px;
        }

        .export-btn:hover{
            background-color: darkgreen;
        }

        @media only screen and (max-width: 768px) {
            #productsSection {
                padding: 2rem;
            }
        }

        .form-container {
            display: flex;
            justify-content: space-between;
        }

        .form-container > div {
            width: 48%; 
        }

        output{
            display: flex;
            flex-direction: row;
            width: 30vw;
        }

        output img{
            height: 15vh;
            margin: 0.5rem;
            border-radius: 1rem;
            width:auto;
        }

        .top-selling{
            border: 1px solid lightgrey;
            border-radius: 1vh;
            overflow-y: scroll;
            display: flex;
            height: 40vh;
            padding: 2vh;
            align-items: center;
            flex-direction: column;
            text-align: left;
        }
        .form-container input,
        .form-container textarea,
        .form-container select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            box-sizing: border-box;
            border: 1px solid lightgrey;
            border-radius: 1rem;
        }

        .form-container button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        
        canvas{
            width:auto!important;
            height: 250px !important;
        }
    </style>
</style>
<div id="alertContainer"></div>
<style>
   .alert {
       position: fixed;
       top: 1rem;
       right: 1rem;
       z-index: 1;
       padding: 1vh 2vh;
       margin-bottom: 1rem;
       border: 2px solid transparent;
       text-transform: capitalize;
       border-radius: 5px;
       transition: 0.3s ease-in-out;
     }

     #graphSelect{
         padding: 1vh;
         border: 1px solid lightgrey;
         border-radius: 1vh;
         text-transform: uppercase;
     }

     .alert.success {
       color: #fff;
       background-color: green;
       border-color: #fff;
     }
     .alert.danger {
       color: #fff;
       background-color: maroon;
       border-color: #fff;
     }
   </style>
   <script>
     function showAlert(message, type) {
       const alertContainer = document.getElementById("alertContainer");

       const alert = document.createElement("div");
       alert.className = `alert ${type}`;
       alert.innerHTML = `${message}<span class="close" onclick="closeAlert(this)"> &#9587;</span>`;

       alertContainer.appendChild(alert);

       setTimeout(() => {
         closeAlert(alert.querySelector(".close"));
       }, 4000);
     }

     function closeAlert(closeButton) {
       const alert = closeButton.parentElement;
       alert.style.display = "none";
     }
   </script>
</head>

<body>
    <div class="container">
        <nav>
            <ul>
                <li class="logo">
                        <img src="/assets/ww side name logo.png" alt="">
                        <span class="nav-item admin">Admin Dashboard</span>
                </li>
                <li><a href="#" onclick="selectSection('usersSection')" id="usersTab">
                    <i class="fas fa-user"></i>
                    <span class="nav-item">Registered Users</span>
                </a></li>
                <li><a href="#" onclick="selectSection('analyticsSection')" id="analyticsTab">
                    <i class="fas fa-chart-line"></i>
                    <span class="nav-item">Analytics</span>
                </a></li>
                <li><a href="#" onclick="selectSection('ordersSection')" id="ordersTab">
                    <i class="fas fa-store"></i>
                    <span class="nav-item">Orders</span>
                </a></li>
                <li><a href="#" onclick="selectSection('productsSection')" id="productsTab">
                    <i class="fas fa-shopping-bag"></i>
                    <span class="nav-item">Add Products</span>
                </a></li>

                <li><a href="#" onclick="selectSection('inventorySection')" id="inventoryTab">
                    <i class="fas fa-warehouse"></i>
                    <span class="nav-item">Inventory</span>
                </a></li>

                <li><a href="#" onclick="selectSection('couponSection')" id="couponTab">
                    <i class="fas fa-gift"></i>
                    <span class="nav-item">Coupons</span>
                </a></li>

                <li>
                    <a href="#" onclick="selectSection('historySection')" id="historyTab">
                        <i class="fas fa-clock"></i>
                    <span class="nav-item">History</span>
                    </a>
                </li>

                <li>
                    <a href="#">
                    <i class="fas fa-sign-out-alt"></i>
                    <span class="nav-item"><button onclick="confirmLogout()" style="background-color: transparent;color: #fff;">Log Out</button></span>
                    </a>
                </li>
            </ul>
        </nav>    

        <script>
             async function confirmLogout() {
        if (confirm("Are you sure you want to logout?")) {
          const response = await axios
            .get("/logout")
            .then((response) => {
              if (response.status === 200) {
                showAlert("logged out successfully", "success");
                window.location.href = "/";
              }
            })
            .catch((error) => {
              showAlert("Failed to logout", "danger");
              console.error("Logout failed", response.data.message);
            });
        } else {
          alert("Logout canceled.");
        }
      }
        </script>

        <section class="main" id="usersSection" style="display: none;" >
            <section class="main-orders">
                <h1>User Analytics <button class="export-btn">Export CSV <iconify-icon icon="ic:baseline-file-download"></iconify-icon></button></h1>
                <div class="user-container">
                    <table class="user-table">
                        <thead>
                            <tr>
                                <th>User Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Pin Code</th>
                                <th>Account Created</th>
                            </tr>
                        </thead>
                        <tbody id="userTableBody">
                        </tbody>
                    </table>
                </div>
            </section>

            <script>
                document.querySelector('.export-btn').addEventListener('click', function() {
                    exportToCSV('user-table.csv');
                });

                async function exportToCSV(filename) {
                    const table = document.querySelector('.user-table');
                    const rows = Array.from(table.querySelectorAll('tr'));

                    let csvContent = "data:text/csv;charset=utf-8,";
                    csvContent += rows.map(row => {
                        const rowData = Array.from(row.children).map(cell => cell.textContent).join(',');
                        return rowData;
                    }).join('\n');

                    const encodedUri = encodeURI(csvContent);
                    const link = document.createElement('a');
                    link.setAttribute('href', encodedUri);
                    link.setAttribute('download', filename);
                    document.body.appendChild(link);
                    link.click();
                }

                document.querySelector('#usersTab').addEventListener('click', async () => {
                    function createTableCell(content) {
                        let cell = document.createElement('td')
                        cell.textContent = content;
                        return cell;
                    }
                    document.querySelector('#userTableBody').innerHTML = ''
                    await axios.get('/api/admin/getAllUsers')
                    .then(response => response.data)
                    .then(users => {
                        users.forEach(user => {
                            let row = document.createElement('tr')
                            row.append(createTableCell(user.name || "N/A"))
                            row.append(createTableCell(user.email || "N/A"))
                            row.append(createTableCell(user.phone || "N/A"))
                            row.append(createTableCell(user.pincode || "N/A"))

                            const dateTime = new Date(user.joinDate || "N/A");
                            const formattedDateTime = dateTime.toLocaleString();
                            row.append(createTableCell(formattedDateTime))
                            document.querySelector('#userTableBody').append(row)
                            showAlert("All users loaded successfully","success");
                        })
                    })
                    .catch(err => showAlert("Oops, an error occurred while fetching users","danger"))
                });
            </script>

        </section>   

        <section class="main" id="analyticsSection" >
            <!-- orders analytics -->
            <!-- done -->
            <section class="main-course">
                <h1>Orders Analytics</h1>
                <div class="course-box">
                    <div>
                        <h1>Orders per Day</h1>
                        <h2 class="total_orders">Total Orders 0, Pending Orders 0</h2>
                        <select name="ordersGraphSelect" id="ordersGraphSelect">
                            <option value="7">last 7 days</option>
                            <option value="30">last 30 days</option>
                            <option value="100">last 100 days</option>
                            <option value="365">last 365 days</option>
                            <option value="1780">last 4 years</option>
                        </select>
                        <canvas id="ordersChart" class="chart"></canvas>
                    </div>
                    <div>
                        <h1>Online Store Sessions</h1>
                        <h2 class="totalStoreSessions"></h2>
                        <select name="storeSessionsSelect" id="storeSessionsGraphSelect">
                            <option value="7">last 7 days</option>
                            <option value="30">last 30 days</option>
                            <option value="100">last 100 days</option>
                            <option value="365">last 365 days</option>
                            <option value="1780">last 4 years</option>
                        </select>
                        <canvas id="storeSessionsChart" class="chart"></canvas>
                    </div>
                </div>
            </section>

            <!-- convertion rate and top selling products -->
            <!-- done -->
            <section class="main-course">
                <div class="course-box">
                    <div>
                    <h1>Online Store Conversion Rate<h2 class="averageConvertionRate">0%</h2></h1>
                    
                        <h2 class="addedToCart">Added to Cart: 0%</h2>
                        <h2 class="reachedCheckout">Reached Checkout: 0%</h2>
                        <h2 class="sessionsConverted">Sessions Converted: 0%</h2>
                    </div>
                    <div class="top-selling">
                        <h2>Top Selling Products</h2>
                        <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
                          <tbody id="topSellingProductsBody">
                          </tbody>
                        </table>
                    </div>
                </div>
            </section>

            <!-- total sales and average order value -->
            <!-- done -->
            <section class="main-course">
                <div class="course-box">
                    <div>
                        <h1>Total Sales</h1>
                        <h2 class="total_sales"></h2>
                        <select name="salesGraphSelect" id="salesGraphSelect">
                            <option value="7">last 7 days</option>
                            <option value="30">last 30 days</option>
                            <option value="100">last 100 days</option>
                            <option value="365">last 365 days</option>
                            <option value="1780">last 4 years</option>
                        </select>
                        <canvas id="salesChart" class="chart"></canvas>
                    </div>
                    <div>
                        <h1>Average Order Value</h1>
                        <h2 class="averageOrderValue">Rs 0</h2>
                        <select name="orderValueGraphSelect" id="orderValueGraphSelect">
                            <option value="7">last 7 days</option>
                            <option value="30">last 30 days</option>
                            <option value="100">last 100 days</option>
                            <option value="365">last 365 days</option>
                            <option value="1780">last 4 years</option>
                        </select>
                        <canvas id="orderValueChart" class="chart"></canvas>
                    </div>
                </div>
            </section>

            <!-- top page rankings -->
            <!-- on hold -->
            <section class="main-course">
                <div class="course-box">
                    <div class="top-landing">
                        <h2>Top 18 Landing Pages</h2>
                        <div class="landingPageRankings"  style="display: flex; flex-wrap: wrap;">
                        </div>
                    </div>
                </div>
            </section>

            <section class="main-course">
                <h1>User Analytics</h1>
                <div class="course-box">
                    <div>
                        <h1>User Registered</h1>
                        <h2 class="registered_users">Total Registered Users: 0</h2>
                        <select name="usersGraphSelect" id="usersGraphSelect">
                            <option value="7">last 7 days</option>
                            <option value="30">last 30 days</option>
                            <option value="100">last 100 days</option>
                            <option value="365">last 365 days</option>
                            <option value="1780">last 4 years</option>
                        </select>
                        <canvas id="usersChart" class="chart"></canvas>
                    </div>
                    <div>
                        <h1>User Subscribed</h1>
                        <h2 class="subscribed_users">Total Subscribed Users: 0</h2>
                        <select name="usersSubGraphSelect" id="usersGraphSelect">
                            <option value="7">last 7 days</option>
                            <option value="30">last 30 days</option>
                            <option value="100">last 100 days</option>
                            <option value="365">last 365 days</option>
                            <option value="1780">last 4 years</option>
                        </select>
                        <canvas id="usersSubChart" class="chart"></canvas>
                    </div>
                </div>
            </section>


            <script>
                let orders = []
                let users = []
                let subscribers = []
                let userSessions = []
                let topPages = {}

                document.addEventListener('DOMContentLoaded', async () => {

                    await axios.get('/api/admin/getAllOrders')
                    .then(response => response.data)
                    .then(ordersData => {orders = ordersData})
                    .catch(err => { showAlert("something went wrong loading Users data", "danger"); console.log(err)})
                    
                    await axios.get('/api/admin/getAllUsers')
                    .then(response => response.data)
                    .then(usersData => {users = usersData})
                    .catch(err => { showAlert("something went wrong loading Users data", "danger"); console.log(err)})

                    
                    await axios.get('/api/admin/getAllUserSessions')
                    .then(response => response.data)
                    .then(usersSessionData => {userSessions = usersSessionData})
                    .catch(err => { showAlert("something went wrong loading Users data", "danger"); console.log(err)})

                    
                    await axios.get('/api/admin/subscribe')
                    .then(response => response.data)
                    .then(subscribersData => {subscribers = subscribersData})
                    .catch(err => { showAlert("something went wrong loading Users data", "danger"); console.log(err)})

                    let pendingOrders = orders.filter(order => order.status === 'Pending')
                    document.querySelector('.total_orders').textContent = `Total Orders ${orders.length}, Pending Orders : ${pendingOrders.length}`;
                    drawOrdersGraph(7)


                    document.querySelector('.totalStoreSessions') .textContent = `Total Store Sessions: ${userSessions.length}`
                    let convertedSessions = userSessions.filter(session => session.sessionConverted > 0);
                    document.querySelector('.sessionsConverted').textContent = `Sessions Converted: ${Math.floor((convertedSessions.length/userSessions.length)*100)}%`;
                    let addedToCart = userSessions.filter(session => session.addedToCart > 0);
                    document.querySelector('.addedToCart') .textContent = `Added to Cart: ${Math.floor((addedToCart.length/userSessions.length)*100)}%,`;
                    let reachedCheckout = userSessions.filter(session => session.reachedCheckout > 0);
                    document.querySelector('.reachedCheckout').textContent = `Reached Checkout: ${(Math.floor(reachedCheckout.length/userSessions.length)*100)}%`;

                    let averageConvertionRate = (((convertedSessions.length + addedToCart.length + reachedCheckout.length)/3)/userSessions.length)*100
                    document.querySelector('.averageConvertionRate').textContent = Math.floor(averageConvertionRate) + "%"
                    drawStoreSessionsGraph(7)
                    updateTopSellingProducts();


                    let totalSales = orders.reduce((total, order) => total + order.totalPayment, 0)
                    document.querySelector('.total_sales').textContent = `Total Sales Rs ${totalSales}`;
                    drawSalesGraph(7);
                    let averageOrderValue = orders.reduce((total, order) => total + order.totalPayment, 0)/orders.length
                    document.querySelector('.averageOrderValue').textContent = "Rs " + Math.floor(averageOrderValue);
                    drawAverageOrderValueGraph(7);

                    document.querySelector('.registered_users').textContent = "Total Registered Users: " + users.length
                    usersGraph(7);
                    document.querySelector('.subscribed_users').textContent = "Total Subscribed Users: " + subscribers.length
                    userSessions.forEach(session => {
                        if (topPages[session.sessionLandingUrl]){
                            topPages[session.sessionLandingUrl] += 1;
                        } else {
                            topPages[session.sessionLandingUrl] = 1
                        }
                    })
                    const rankedUrls = Object.keys(topPages).map(url => ({ url, count: topPages[url] })).sort((a, b) => b.count - a.count).slice(0, 18)
                    rankedUrls.forEach(data => {
                        document.querySelector(".landingPageRankings").innerHTML += `<p>${data.url} [${data.count}]</p>, <br>`
                    })
                });

                document.querySelector(`#ordersGraphSelect`).addEventListener('change', async event => {
                    drawOrdersGraph(event.target.value)
                });
                function drawOrdersGraph(lastDays) {

                    const today = new Date();
                    const startDate = new Date();
                    startDate.setDate(today.getDate() - lastDays + 1);
                    const endDate = today;

                    const ordersPerDay = Array.from({ length: lastDays }, (_, i) => {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + i);

                        const dayOrders = orders.filter(order => {
                            const orderDate = new Date(order.createdDate);

                            return orderDate.getFullYear() === date.getFullYear() && orderDate.getMonth() === date.getMonth() && orderDate.getDate() === date.getDate();

                        });

                        return { date, count: dayOrders.length };
                    });

                    const ctx = document.getElementById('ordersChart').getContext('2d');
                    const chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: ordersPerDay.map(item => item.date.toDateString()),
                            datasets: [{
                                label: 'Orders per Day',
                                data: ordersPerDay.map(item => item.count),
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                }

                document.querySelector(`#storeSessionsGraphSelect`).addEventListener('change', async event => {
                    drawStoreSessionsGraph(event.target.value)
                });
                function drawStoreSessionsGraph(lastDays) {
                    const today = new Date();
                    const startDate = new Date();
                    startDate.setDate(today.getDate() - lastDays + 1);
                    const endDate = today;

                    const storeSessionsPerDay = Array.from({ length: lastDays }, (_, i) => {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + i);

                        const daySessions = userSessions.filter(session => {
                            const sessionDate = new Date(session.createdAt);

                            return sessionDate.getFullYear() === date.getFullYear() && sessionDate.getMonth() === date.getMonth() && sessionDate.getDate() === date.getDate();

                        });

                        return { date, count: daySessions.length };
                    });

                    const ctx = document.getElementById('storeSessionsChart').getContext('2d');
                    const chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: storeSessionsPerDay.map(item => item.date.toDateString()),
                            datasets: [{
                                label: 'Sessions per Day',
                                data: storeSessionsPerDay.map(item => item.count),
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                    }

                document.querySelector(`#salesGraphSelect`).addEventListener('change', async event => {
                    drawSalesGraph(event.target.value)
                });
                function drawSalesGraph(lastDays) {
                    const today = new Date();
                    const startDate = new Date();
                    startDate.setDate(today.getDate() - lastDays + 1);
                    const endDate = today;

                    const salesPerDay = Array.from({ length: lastDays }, (_, i) => {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + i);

                        const dayOrders = orders.filter(order => {
                            const orderDate = new Date(order.createdDate);

                            return orderDate.getFullYear() === date.getFullYear() && orderDate.getMonth() === date.getMonth() && orderDate.getDate() === date.getDate();

                        });
                        const totalPayment = dayOrders.reduce((total, order) => total + order.totalPayment, 0);

                        return { date, totalPayment };
                    });

                    const ctx = document.getElementById('salesChart').getContext('2d');
                    const chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: salesPerDay.map(item => item.date.toDateString()),
                            datasets: [{
                                label: 'Sales per Day',
                                data: salesPerDay.map(item => item.totalPayment),
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value, index, values) {
                                            return '₹' + value.toFixed(2);
                                        }
                                    }
                                }
                            }
                        }
                    });
                }

                document.querySelector(`#orderValueGraphSelect`).addEventListener('change', async event => {
                    drawAverageOrderValueGraph(event.target.value)
                });
                function drawAverageOrderValueGraph(lastDays) {
                    const today = new Date();
                    const startDate = new Date();
                    startDate.setDate(today.getDate() - lastDays + 1);
                    const endDate = today;

                    const averageOrderValuePerDay = Array.from({ length: lastDays }, (_, i) => {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + i);

                        const dayOrders = orders.filter(order => {
                            const orderDate = new Date(order.createdDate);

                            return orderDate.getFullYear() === date.getFullYear() && orderDate.getMonth() === date.getMonth() && orderDate.getDate() === date.getDate();

                        });
                        const averageOrderValue = dayOrders.length > 0 ? dayOrders.reduce((total, order) => total + order.totalPayment, 0) / dayOrders.length : 0;

                        return { date, averageOrderValue };
                    });

                    const ctx = document.getElementById('orderValueChart').getContext('2d');
                    const chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: averageOrderValuePerDay.map(item => item.date.toDateString()),
                            datasets: [{
                                label: 'Average Order Value per Day',
                                data: averageOrderValuePerDay.map(item => item.averageOrderValue),
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value, index, values) {
                                            return '₹' + value.toFixed(2);
                                        }
                                    }
                                }
                            }
                        }
                    });
                }

                document.querySelector(`#usersGraphSelect`).addEventListener('change', async event => {
                    usersGraph(event.target.value)
                });
                function usersGraph(lastDays) {
                    const today = new Date();
                    const startDate = new Date();
                    startDate.setDate(today.getDate() - lastDays + 1);
                    const endDate = today;

                    const registeredUsersPerDay = Array.from({ length: lastDays }, (_, i) => {
                        const date = new Date(startDate);
                        date.setDate(startDate.getDate() + i);

                        const dayUsers = users.filter(user => {
                            const userDate = new Date(user.joinDate);
                            return userDate.getFullYear() === date.getFullYear() && userDate.getMonth() === date.getMonth() && userDate.getDate() === date.getDate();
                        });

                        return { date, count : dayUsers.length };
                    });

                    const ctx = document.getElementById('usersChart').getContext('2d');
                    const chart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: registeredUsersPerDay.map(item => item.date.toDateString()),
                            datasets: [{
                                label: 'Average Order Value per Day',
                                data: registeredUsersPerDay.map(item => item.count),
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                }
                            }
                        }
                    });
                }
       
                function calculateSalesToday() {
                    const today = new Date();
                    const todayOrders = orders.filter(order => {
                        const orderDate = new Date(order.Date);
                        return orderDate.getDate() === today.getDate() &&
                            orderDate.getMonth() === today.getMonth() &&
                            orderDate.getFullYear() === today.getFullYear();
                    });

                    return todayOrders.reduce((total, order) => total + order.totalPayment, 0);
                }

                function calculateCompletedOrders() {

                    const completedOrders = orders.filter(order => order.status === 'Delivered');
                    return completedOrders.length;
                }

                async function updateTopSellingProducts() {
                    const tableBody = document.querySelector('#topSellingProductsBody');
                    tableBody.innerHTML = '';
                    calculateTopSellingProducts(5)
                    .then (topSellingProducts => {
                        topSellingProducts.forEach(async (product) => {
                            console.log(product)
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">
                                    <img src="${product.image}" alt="${product.name}" style="max-width: 50px; max-height: 50px;">
                                </td>
                                <td style="border: 1px solid #ddd; padding: 8px; text-align: left;">${product.name}</td>
                                <td style="border: 1px solid #ddd; padding: 8px; text-align: left;">${product.unitsSold} Units Sold</td>
                            `;
                            tableBody.appendChild(row);
                        });
                    })
                }

                async function calculateTopSellingProducts(numProducts) {

                    const productSalesMap = new Map();

                    orders.forEach(order => {
                        order.products.forEach(product => {
                            const productId = product.itemId;
                            const unitsSold = product.quantity;

                            if (productSalesMap.has(productId)) {
                                productSalesMap.set(productId, productSalesMap.get(productId) + unitsSold);
                            } else {
                                productSalesMap.set(productId, unitsSold);
                            }
                        });
                    });

                    const sortedProducts = [...productSalesMap.entries()]
                        .sort((a, b) => b[1] - a[1])
                        .slice(0, numProducts);

                    const topSellingProducts = await Promise.all(sortedProducts.map(async ([productId, unitsSold]) => {
                        try {
                            const response = await axios.get(`/api/products/${productId}`);
                            const productDetails = response.data;

                            return {
                                name: productDetails.name,
                                image: productDetails.imageLink[0],
                                unitsSold: unitsSold
                            };
                        } catch (error) {
                            console.error(`Error fetching product details for productId ${productId}:`, error);

                            return {};
                        }
                    }));

                    return topSellingProducts;
                }
            </script>

        </section>   

        <section class="main" id="ordersSection" style="display: none;">
            <section class="main-orders">
                <h1>Orders  <button class="export-btn ml-2" onclick="exportToCSV()">Export CSV <iconify-icon icon="ic:baseline-file-download"></iconify-icon></button></h1>

                <div class="orders-container">
                    <ul class="list">
                        <li onclick="loadAllOrders()" id="all">All Orders</li>
                        <li onclick="loadPendingOrders()" id="Pending">Pending Orders</li>
                        <li onclick="loadSentOrders()" id="Sent">Sent Orders</li>
                        <li onclick="loadDeliveringOrders()" id="Delivering">Delivering Orders</li>
                        <li onclick="loadDeliveredOrders()" id="Delivered">Delivered Orders</li>
                    </ul>
                    <div>
                        <div class="order-table" id="allOrdersTab">
                            <table class="table table-bordered table-striped" style="overflow-y: auto;">
                                <thead>
                                    <tr>
                                        <th style="width: 10%;">Order Id</th>
                                        <th style="width: 10%;">Identification</th>
                                        <th style="width: 15%;">Products</th>
                                        <th style="width: 30%;">Address</th>
                                        <th style="width: 5%;">Method</th>
                                        <th style="width: 15%;">Date</th>
                                        <th style="width: 15%;">Status</th>
                                    </tr>
                                </thead>
                                <tbody id="OrdersBody" style="overflow: hidden;"></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </section>

        <script>
            function exportToCSV() {

                const rows = document.querySelectorAll("#allOrdersTab tbody tr");
                const data = Array.from(rows, row => {

                    const columns = row.querySelectorAll("td:not(:last-child)");
                    return Array.from(columns, column => column.textContent).join(",");
                }).join("\n");

                const blob = new Blob([data], { type: "text/csv" });

                const link = document.createElement("a");
                link.href = URL.createObjectURL(blob);
                link.download = "orders.csv";

                link.click();
            }

                let Orders = []
                let selectedOrdersTab = 'all'
                function createTableCell(content) {
                    let cell = document.createElement('td')
                    cell.innerHTML = content;
                    return cell;
                }
                function dynamicOrderStatus (Id,content) {
                    let cell = document.createElement('td')
                    cell.innerHTML = `
                        <select id="myDropdown_${Id}">
                            <option value="Pending" ${content === 'Pending' ? 'selected' : ''}>Pending</option>
                            <option value="Sent" ${content === 'Sent' ? 'selected' : ''}>Sent</option>
                            <option value="Delivering" ${content === 'Delivering' ? 'selected' : ''}>Delivering</option>
                            <option value="Delivered" ${content === 'Delivered' ? 'selected' : ''}>Delivered</option>
                        </select>
                    `;
                    return cell;
                }
                const loadOrders = async () => {
                    await axios.get('/api/admin/getAllOrders')
                        .then(response => response.data)
                        .then(data => {
                            Orders = data;
                            loadAllOrders();
                            showAlert("Orders loaded successfully","success")
                        })
                        .catch(err => showAlert("server refused on order data","danger"))
                }

                function loadAllOrders() {
                    document.querySelector('#' + selectedOrdersTab).classList.remove('active')
                    selectedOrdersTab = 'all'
                    document.querySelector('#' + selectedOrdersTab).classList.add('active')
                    loadOrdersTable(Orders);
                }

                function loadPendingOrders() {
                    const pendingOrders = Orders.filter(order => order.status === 'Pending');
                    document.querySelector('#' + selectedOrdersTab).classList.remove('active')
                    selectedOrdersTab = 'Pending'
                    document.querySelector('#' + selectedOrdersTab).classList.add('active')

                    loadOrdersTable(pendingOrders);
                }

                function loadSentOrders() {
                    const sentOrders = Orders.filter(order => order.status === 'Sent');
                    document.querySelector('#' + selectedOrdersTab).classList.remove('active')
                    selectedOrdersTab = 'Sent'
                    document.querySelector('#' + selectedOrdersTab).classList.add('active')

                    loadOrdersTable(sentOrders);
                }

                function createTableCell(data, isOrderId = false) {
                    let cell = document.createElement('td');
                    if (isOrderId && data.length > 11) {
                        cell.textContent = data.substring(0, 11) + '..';
                    } else {
                        cell.textContent = data;
                    }
                    return cell;
                }

                function loadDeliveringOrders() {
                    const deliveringOrders = Orders.filter(order => order.status === 'Delivering');
                    document.querySelector('#' + selectedOrdersTab).classList.remove('active')
                    selectedOrdersTab = 'Delivering'
                    document.querySelector('#' + selectedOrdersTab).classList.add('active')

                    loadOrdersTable(deliveringOrders);
                }

                function loadDeliveredOrders() {
                    const deliveredOrders = Orders.filter(order => order.status === 'Delivered');
                    document.querySelector('#' + selectedOrdersTab).classList.remove('active')
                    selectedOrdersTab = 'Delivered'
                    document.querySelector('#' + selectedOrdersTab).classList.add('active')

                    loadOrdersTable(deliveredOrders);
                }

                function loadOrdersTable(orders) {
                    document.querySelector('#OrdersBody').innerHTML = '';
                    orders.forEach(async order => {

                        let row = document.createElement('tr');
                        row.append(createTableCell(order.razorpay_order_id, true));
                        
                        row.append(createTableCell(`${order.name}, ${order.email}, ${order.phone}`));   
                        let names = '';
                        await Promise.all(order.products.map(async product => {
                            try {
                                const response = await axios.get(`/api/products/${product.itemId}`);
                                names += ` ${response.data.name}`;
                            } catch (err) {
                                console.log('error fetching products', err);
                            }
                        }));
                        row.append(createTableCell(names));
                        row.append(`${order.address}, locality ${order.locality}, landmark ${order.landmark}, city, ${order.city} (Pincode : ${order.pincode})`);
                        row.append(createTableCell((order.deliveryMethod) || "Prepaid"));
                        const dateTime = new Date(order.Date);
                        const formattedDateTime = dateTime.toLocaleString();
                        row.append(createTableCell(formattedDateTime));
                        row.append(dynamicOrderStatus(order.razorpay_order_id, order.status));
                        document.querySelector('#OrdersBody').append(row);
                        document.querySelector(`#myDropdown_${order.razorpay_order_id}`).addEventListener('change', async event => {
                            const selectedValue = event.target.value;
                            await axios.put('/api/update-order-status/' + order.razorpay_order_id, {
                                status: selectedValue
                            })
                            .then(response => {
                                showAlert('order status updated successfully', 'success');
                                document.querySelector('#' + selectedOrdersTab).classList.remove('active')

                                order.status = selectedValue;
                                selectedOrdersTab = selectedValue;

                                document.querySelector('#' + selectedOrdersTab).classList.add('active')

                                switch (selectedValue) {
                                    case 'Pending':
                                        loadPendingOrders()
                                    break;
                                    case 'Sent':
                                        loadSentOrders()
                                    break;
                                    case 'Delivering':
                                        loadDeliveringOrders()
                                    break;
                                    case 'Delivered':
                                        loadDeliveredOrders()
                                    break;
                                    default:
                                        loadAllOrders()
                                    break;
                                }
                            })
                            .catch(error => {
                                showAlert('error updating order status', 'danger');
                            });
                        });
                    });
                }

                document.querySelector('#ordersTab').addEventListener('click', loadOrders)
            </script>
        </section>

        <section class="main" id="productsSection" style="display: none;">
            <section class="main-orders">

            <h1 style="margin-bottom: 0.3rem;">Add Product</h1>
                    <div class="form-container" style="overflow-y: scroll;">
                        <div>
                            <label for="productName">Product Name:</label>
                            <input type="text" id="productName" name="productName" required>

                            <label for="productDescription">Product Description:</label>
                            <textarea id="productDescription" name="productDescription" rows="4" required></textarea>

                            <label for="originalPrice">Original Price (₹):</label>
                            <input type="number" id="originalPrice" name="originalPrice" required>

                            <label for="offeredPrice">Offered Price (₹)<span style="color: #999;">(Amount to be displayed to User)</span>:</label>
                            <input type="number" id="offeredPrice" name="offeredPrice" required>

                            <label for="ProductSKUcode">Product SKU Code:</label>
                            <input type="text" id="ProductSKUcode" name="ProductSKUcode">

                            <label for="category">Category :</label>

                            <select id="category" name="category" required>
                                <option value="Face Care">Face Care</option>
                                <option value="Hair Care">Hair Care</option>
                                <option value="Body Care">Body Care</option>
                                <option value="Beard Care">Beard Care</option>
                                <option value="Skin Care">Skin Care</option>
                            </select>

                            <label for="productFAQ">FAQ :</label>
                            <textarea id="productFAQ" name="productFAQ" rows="3" required></textarea>

                            <label for="keyFeatures">Key Features :</label>
                            <textarea id="keyFeatures" name="keyFeatures" rows="3" required></textarea>

                            <label for="howtouse">How To Use :</label>
                            <textarea id="howtouse" name="howtouse" rows="3" required></textarea>

                            <label for="metaTitle">Meta Title :</label>
                            <textarea id="metaTitle" name="metaTitle" rows="1" required></textarea>

                            <label for="metaDescription">Meta Description:</label>
                            <textarea id="metaDescription" name="metaDescription" rows="3" required></textarea>

                            <button onclick="addProduct()" style="margin-top: 3vh;margin-bottom: 3vh;">Publish Product</button>

                            <button onclick="scheduleProduct()" class="schedule-product">Schedule Product</button>
                        </div>
                        <div>
                            <label for="stock">Stock:</label>
                            <input type="number" id="stock" name="stock" required>

                            <label for="new-arrival">New Arrival:</label>
                            <div>
                                <input type="radio" id="yes" name="newArrival" value="true" checked>
                                <label for="yes" style="margin-top: -2vh;">Yes</label>

                                <input type="radio" id="no" name="newArrival" value="false">
                                <label for="no">No</label>
                            </div>

                            <label for="best-seller">Best Quality:</label>
                            <div>
                                <input type="radio" id="yes" name="bestSeller" value="true" checked>
                                <label for="yes">Yes</label>

                                <input type="radio" id="no" name="bestSeller" value="false">
                                <label for="no">No</label>
                            </div>

                            <label for="Image1">Main Image (250x250):</label>
                            <input type="file" value="-1" id="Image1" name="Image1" accept="image/*" required onchange="previewImage('Image1')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;">
                            <img id="Image1Preview" alt="Preview" style="width: 20%; height: 15vh; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">

                            <div class="addon-images">
                                <div class="img2">
                                    <label for="Image2">2nd Image (250x250):</label>
                                    <input type="file" value="-1" id="Image2" name="Image2" accept="image/*" required onchange="previewImage('Image2')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;"> 
                                    <img id="Image2Preview" alt="Preview" style="width: 70%; height: auto; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">
                                </div>

                                <div class="img2">
                                    <label for="Image3">3rd Image (250x250):</label>
                                    <input type="file" value="-1" id="Image3" name="Image3" accept="image/*" required onchange="previewImage('Image3')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;">
                                    <img id="Image3Preview" alt="Preview" style="width: 70%; height: auto; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">
                                </div>

                                <div class="img2">
                                    <label for="Image4">4th Image (250x250):</label>
                                    <input type="file" value="-1" id="Image4" name="Image4" accept="image/*" required onchange="previewImage('Image4')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;">
                                    <img id="Image4Preview" alt="Preview" style="width: 70%; height: auto; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">
                                </div>

                                <div class="img2">
                                    <label for="Image5">5th Image (250x250):</label>
                                    <input type="file" value="-1" id="Image5" name="Image5" accept="image/*" required onchange="previewImage('Image5')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;">
                                    <img id="Image5Preview" alt="Preview" style="width: 70%; height: auto; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">
                                </div>

                                <div class="img2">
                                    <label for="Image6">6th Image (250x250):</label>
                                    <input type="file" value="-1" id="Image6" name="Image6" accept="image/*" required onchange="previewImage('Image6')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;">
                                    <img id="Image6Preview" alt="Preview" style="width: 70%; height: auto; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">
                                </div>

                                <div class="img2">
                                    <label for="Image7">7th Image (250x250):</label>
                                    <input type="file" value="-1" id="Image7" name="Image7" accept="image/*" required onchange="previewImage('Image7')" style="border: none; padding: 0.5rem; background-color: #f0f0f0;">
                                    <img id="Image7Preview" alt="Preview" style="width: 70%; height: auto; margin-top: 0rem; margin-bottom: 1rem;border-radius: 1rem;">
                                </div>
                            </div>

                        </div>
                    </div>
                    <div id="scheduleModal" class="item_schedule_modal" style="display: none;">
                        <div class="modal-content">
                            <span class="close" onclick="closeScheduleModal()" style="cursor: pointer;position: absolute;top: 1vh;right: 1vh;">&#9587;</span>
                            <h2>Schedule Product</h2>
                            <div>
                                <label for="scheduleDate">Scheduled Date:</label>
                                <input type="date" id="scheduleDate" name="scheduleDate" required>
                                <span id="scheduleDateError" class="error-message"></span>
                            </div>
                            <div>
                                <label for="scheduleTime">Scheduled Time:</label>
                                <input type="time" id="scheduleTime" name="scheduleTime" required>
                                <span id="scheduleTimeError" class="error-message"></span>
                            </div>

                            <button onclick="addProduct()">Schedule Product</button>
                        </div>
                    </div>                   
                    <script>
                        function setScheduledDateTime() {
                            const now = new Date();
                            const currentDate = now.toISOString().split('T')[0];
                            const currentHours = ('0' + now.getHours()).slice(-2);
                            const currentMinutes = ('0' + now.getMinutes()).slice(-2);
                            const currentTime = `${currentHours}:${currentMinutes}`;
                            document.getElementById('scheduleDate').value = currentDate;
                            document.getElementById('scheduleTime').value = currentTime;
                        }
                        function getScheduledDateTime() {
                            const scheduleDateInput = document.getElementById('scheduleDate').value;
                            const scheduleTimeInput = document.getElementById('scheduleTime').value;
                            const combinedDateTimeString = scheduleDateInput + 'T' + scheduleTimeInput;
                            const scheduledDateTime = new Date(combinedDateTimeString);
                            if (isNaN(scheduledDateTime.getTime())) {
                                document.getElementById('scheduleDateError').innerText = 'Invalid date and time';
                            } else {
                                document.getElementById('scheduleDateError').innerText = '';
                                console.log('Scheduled Date and Time:', scheduledDateTime);
                                return scheduledDateTime;
                            }
                        }
                        function scheduleProduct() {
                            setScheduledDateTime();
                            var modal = document.getElementById('scheduleModal');
                            modal.style.display = 'flex';
                        }
                        function closeScheduleModal() {
                            var modal = document.getElementById('scheduleModal');
                            modal.style.display = 'none';
                        }
                    </script>
            </section>

            <script>    
                function previewImage(inputId) {
                    const input = document.getElementById(inputId);
                    const preview = document.getElementById(`${inputId}Preview`);

                    if (input.files && input.files[0]) {
                        const reader = new FileReader();

                        reader.onload = function (e) {
                            preview.src = e.target.result;
                        };

                        reader.readAsDataURL(input.files[0]);
                    }
                }

                function resetPreview () {
                    document.getElementById('Image1Preview').src = ''
                    document.getElementById('Image2Preview').src = ''
                    document.getElementById('Image3Preview').src = ''
                    document.getElementById('Image4Preview').src = ''
                    document.getElementById('Image5Preview').src = ''
                    document.getElementById('Image6Preview').src = ''
                    document.getElementById('Image7Preview').src = ''

                }
                async function addProduct() {
                    let bestSeller = false;

                    document.getElementsByName('bestSeller').forEach(button => {
                        if (button.checked) {
                            bestSeller = Boolean(button.value);
                        }
                    });

                    let newArrival = false;

                    document.getElementsByName('newArrival').forEach(button => {
                        if (button.checked) {
                            newArrival = Boolean(button.value);
                        }
                    });

                    const name = document.getElementById('productName').value;
                    const description = document.getElementById('productDescription').value;

                    const skuCode = document.getElementById('ProductSKUcode').value

                    const FAQ = document.getElementById("productFAQ").value
                    const metaTitle = document.getElementById("metaTitle").value;
                    const metaDescription = document.getElementById("metaDescription").value;
                    const keyFeatures  = document.getElementById("keyFeatures").value
                    const how_to_use = document.getElementById("howtouse").value

                    const originalPrice = document.getElementById('originalPrice').value;
                    const offeredPrice = document.getElementById('offeredPrice').value;
                    const category = document.getElementById('category').value;
                    const stock = document.getElementById('stock').value;
                    const MainImage = document.getElementById('Image1').files[0];

                    const parsedOriginalPrice = parseInt(originalPrice, 10);
                    const parsedOfferedPrice = parseInt(offeredPrice, 10);

                    const createdAt = getScheduledDateTime();

                    if (parsedOfferedPrice >= parsedOriginalPrice) {
                        showAlert("Enter a valid price", "danger");
                        return;
                    } else {
                        if (
                            name &&
                            description &&
                            skuCode &&
                            FAQ &&
                            keyFeatures &&
                            metaTitle &&
                            metaDescription &&
                            how_to_use &&
                            originalPrice &&
                            offeredPrice &&
                            category &&
                            stock &&
                            MainImage &&
                            createdAt
                        ) {
                            let formData = new FormData();

                            formData.append('name', name);
                            formData.append('description', description);
                            formData.append('skuCode', skuCode)
                            formData.append('FAQ', FAQ);
                            formData.append('meta_title', metaTitle);
                            formData.append('meta_description', metaDescription);
                            formData.append('keyFeatures', keyFeatures);
                            formData.append('how_to_use', how_to_use);
                            formData.append('newArrival', newArrival);
                            formData.append('bestSeller', bestSeller);
                            formData.append('originalPrice', originalPrice);
                            formData.append('offeredPrice', offeredPrice);
                            formData.append('category', category);
                            formData.append('stock', stock);
                            formData.append('imageFiles', MainImage);
                            formData.append('createdAt', createdAt)

                            for (let index = 0 ; index < 6 ; index++){
                                if (document.getElementById(`Image${index+2}`).files[0]){
                                    formData.append('imageFiles', document.getElementById(`Image${index+2}`).files[0]);
                                }
                            }

                            await axios.post('/api/products', formData)
                            .then((response) => {
                                showAlert('Product added successfully:',"success");
                                document.getElementById('productName').value = '';
                                document.getElementById('ProductSKUcode').value = ''
                                document.getElementById('productDescription').value = '';
                                document.getElementById("productFAQ").value = ''
                                document.getElementById("metaTitle").value = ''
                                document.getElementById("metaDescription").value = ''
                                document.getElementById("keyFeatures").value = ''
                                document.getElementById("howtouse").value = ''
                                document.getElementById('originalPrice').value = '';
                                document.getElementById('offeredPrice').value = '';
                                document.getElementById('category').value = '';
                                document.getElementById('stock').value = '';
                                document.getElementById('Image1').files[0] = '';
                                document.getElementById('Image2').files[0] = '';
                                document.getElementById('Image3').files[0] = '';
                                document.getElementById('Image4').files[0] = '';
                                document.getElementById('Image5').files[0] = '';
                                document.getElementById('Image6').files[0] = '';
                                document.getElementById('Image7').files[0] = '';

                                resetPreview()
                            })
                            .then (() => {

                                const myElement = document.getElementById('inventoryTab');

                                const myEvent = new Event('click');

                                myElement.dispatchEvent(myEvent);
                            })
                            .catch((error) => {
                                showAlert('Error adding product:', "danger");
                                console.log(error);
                            });
                        } else {
                            showAlert('Please fill in all the details before adding the product.',"danger");
                        }
                    }
                }
            </script>
        </section>

        <style>
            .item_edit_modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                justify-content: center;
                align-items: center;
                z-index: 1; 
            }

            .image_edit_modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                justify-content: center;
                align-items: center;
                z-index: 2; 
            }

            .item_schedule_modal{
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                justify-content: center;
                align-items: center;
                z-index: 1;
            }

            .modal-content {
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                max-width: 50vw;
                width: 100%;
                height: 90vh !important;
                overflow-y: scroll;
                height: max-content;
                text-align: left;
                position: relative;
            }

            .modal-content-schedule {
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                max-width: 50vw;
                width: 100%;
                overflow-y: scroll;
                height: max-content !important;
                text-align: left;
                position: relative;
            }

            .modal-content button{
                margin-top: 1vh;
                background-color: green;
                padding: 1vh;
                color: #fff;
                cursor: pointer;
                border-radius: 5px;
            }

            .modal-content div{
                margin-top: 1vh;
                display: flex;
                justify-content: space-between;
            }

            .modal-content .new-addon-images div{
                width: 32%;
                display: flex;
                flex-direction: column;
            }

            .modal-content .new-addon-images label{
                font-size: 14px;
            }

            .modal-content input{
                padding:1vh;
                border-radius: 1vh;
                width:50%;
                border: 1px solid #000;
            }

            .modal-content select{
                padding:1vh;
                border-radius: 1vh;
                width:50%;
                border: 1px solid #000;
            }

            .modal-content textarea{
                padding:1vh;
                border-radius: 1vh;
                width:50%;
                border: 1px solid #000;
            }

            .modal-content label{
                padding:1vh;
                padding-left:0;
                border-radius: 1vh;
                width:50%;
            }
        </style>

        <section class="main" id="inventorySection" style="display: none;">
            <section class="main-orders">
                <h1>Products Grid</h1>
                <div class="product-grid" id="productGrid"></div>

                <div id="editModal" class="item_edit_modal" style="display: none;">
                    <div class="modal-content">
                        <span class="close" onclick="closeEditModal()" style="cursor: pointer;position: absolute;top: 1vh;right: 1vh;">&#9587;</span>
                        <h2>Edit Product</h2>
                        <div>
                            <label for="newName">Product Name:</label>
                            <input type="text" id="newName" name="newName" required aria-describedby="newNameError">
                            <span id="newNameError" class="error-message"></span>
                        </div>
                        <div>
                            <label for="newDescription">Product Description:</label>
                            <textarea id="newDescription" name="newDescription" rows="5" required ></textarea>
                            <span id="newDescriptionError" class="error-message"></span>
                        </div>
                        <div>
                            <label for="newProductSKUcode">Product Sku Code:</label>
                            <input type="text" id="newProductSKUcode" name="newProductSKUcode" required aria-describedby="newNameError">
                            <span id="newProductSKUcodeError" class="error-message"></span>
                        </div>
                        <div>
                            <label for="newStock">New Stock:</label>
                            <input type="number" id="newStock" name="newStock" required aria-describedby="newStockError">
                            <span id="newStockError" class="error-message"></span>
                        </div>
                        <div>
                            <label for="newOfferedPrice">New Offered Price:</label>
                            <input type="number" id="newOfferedPrice" name="newOfferedPrice" required aria-describedby="newOfferedPriceError">
                            <span id="newOfferedPriceError" class="error-message"></span>
                        </div>
                        <div>
                            <label for="newOriginalPrice">New Original Price:</label>
                            <input type="number" id="newOriginalPrice" name="newOriginalPrice" required aria-describedby="newOriginalPriceError">
                            <span id="newOriginalPriceError" class="error-message"></span>
                        </div>

                        <div>
                            <label for="newcategory">Category :</label>

                            <select id="newcategory" name="newcategory" required>
                                <option value="Face Care">Face Care</option>
                                <option value="Hair Care">Hair Care</option>
                                <option value="Body Care">Body Care</option>
                                <option value="Beard Care">Beard Care</option>
                                <option value="Skin Care">Skin Care</option>
                            </select>
                        </div>

                        <div>
                            <label for="newKeyFeatures">Key Features:</label>
                            <textarea id="newKeyFeatures" name="newKeyFeatures" rows="5" required ></textarea>
                            <span id="newKeyFeatures" class="error-message"></span>
                        </div>

                        <div>
                            <label for="newUse">How to Use:</label>
                            <textarea id="newUse" name="newUse" rows="5" required ></textarea>
                            <span id="newUse" class="error-message"></span>
                        </div>

                        <div>
                            <label for="newFAQ">FAQ:</label>
                            <textarea id="newFAQ" name="newFAQ" rows="5" required ></textarea>
                            <span id="newFAQ" class="error-message"></span>
                        </div>

                        <div>
                            <label for="newMetaTitle">Meta Title:</label>
                            <textarea id="newMetaTitle" name="newMetaTitle" rows="1" required ></textarea>
                            <span id="newMetaTitle" class="error-message"></span>
                        </div>

                        <div>
                            <label for="newMetaDesc">Meta Description:</label>
                            <textarea id="newMetaDesc" name="newMetaDesc" rows="3" required ></textarea>
                            <span id="newMetaDesc" class="error-message"></span>
                        </div>
                        <div>

                            <label for="newImages">Product Images:</label>
                            <div id="productImages">
                            </div>
                        </div>
                        <button onclick="updateData()">Save Changes</button>
                    </div>
                </div>

            </section>
            <script>
                let selectedItemId = ''
                let imageDataForUpdation = {}

                async function updateData () {
                    let formData = new FormData();

                    formData.append('itemId', selectedItemId);
                    formData.append('name', document.querySelector('#newName').value);
                    formData.append('skuCode', document.querySelector('#newProductSKUcode').value);
                    formData.append('description', document.querySelector('#newDescription').value);
                    formData.append('category', document.querySelector('#newcategory').value);
                    formData.append('keyFeatures', document.querySelector('#newKeyFeatures').value);
                    formData.append('FAQ', document.querySelector('#newFAQ').value);
                    formData.append('meta_title', document.querySelector('#newMetaTitle').value);
                    formData.append('meta_description', document.querySelector('#newMetaDesc').value);
                    formData.append('stock', document.querySelector('#newStock').value);
                    formData.append('offeredPrice', document.querySelector('#newOfferedPrice').value);
                    formData.append('originalPrice', document.querySelector('#newOriginalPrice').value);

                    for (const index in imageDataForUpdation) {
                        formData.append('imageFiles', imageDataForUpdation[index]);
                        formData.append('imageFileIndexes', index);
                    }

                    await axios.put(`/api/products`,formData)
                    .then(response => showAlert("Product data updated successfully","success"))
                    .catch(err => {
                        console.log(err)
                        showAlert("Error updating the product","danger")
                    })
                }
                async function openEditModal(itemId) {
                    selectedItemId = itemId;
                    document.querySelector(".item_edit_modal").style.display = 'flex';
                    await axios.get(`/api/products/${itemId}`)
                    .then(response => response.data)
                    .then(product => {
                        document.querySelector('#newName').value = product.name
                        document.querySelector('#newProductSKUcode').value = product.skuCode
                        document.querySelector('#newDescription').value = product.description
                        document.querySelector('#newcategory').value = product.category
                        document.querySelector('#newUse').value = product.how_to_use
                        document.querySelector('#newKeyFeatures').value = product.keyFeatures
                        document.querySelector('#newFAQ').value = product.FAQ
                        document.querySelector('#newMetaTitle').value = product.meta_title
                        document.querySelector('#newMetaDesc').value = product.meta_description
                        document.querySelector('#newStock').value = product.stock
                        document.querySelector('#newOfferedPrice').value = product.offeredPrice
                        document.querySelector('#newOriginalPrice').value = product.originalPrice

                        product.imageLink.forEach((link, index) => {
                            let div = document.createElement('div');
                            let img = document.createElement('img');
                            img.src = link;
                            img.alt = "product image";
                            img.style.height = "120px";
                            img.style.width = "120px";

                            img.addEventListener('click', () => {
                                const input = document.createElement('input');
                                input.type = 'file';
                                input.accept = 'image/*';
                                input.onchange = (event) => {
                                    const file = event.target.files[0];
                                    const reader = new FileReader();
                                    reader.onload = () => {
                                        img.src = reader.result;
                                        imageDataForUpdation[index] = file
                                        console.log(imageDataForUpdation)
                                    };
                                    reader.readAsDataURL(file);
                                };
                                input.click();
                            });
                            div.appendChild(img);
                            document.querySelector('#productImages').appendChild(div);
                        })

                    })
                    document.querySelector('#newStock').value
                }

                function closeEditModal() {
                    selectedItemId = '';
                    imageDataForUpdation = {}
                    document.querySelector(".item_edit_modal").style.display = 'none';
                }

                async function deleteProduct(itemId) {
                    await axios.delete(`/api/products/${itemId}`)
                    .then(response => {
                        document.querySelector("."+itemId).innerHTML = ''
                        showAlert("product deleted successfully","success")
                    })
                    .catch(err => showAlert("some error occured when removing the product","danger"))
                }

                async function loadAllProducts () {
                    document.querySelector('.product-grid').innerHTML = ''
                    await axios.get('/api/products')
                    .then(response => response.data)
                    .then(products => {
                        let mainGrid = document.querySelector('.product-grid')
                        products.forEach((product, index) => {
                            let productDiv = document.createElement('div')

                            var words = product.name.split(" ");
                            product.name = words.slice(0, 3).join(" ");
                            if (words.length > 3) {
                                product.name += "...";
                            }
                            productDiv.innerHTML = `
                            <div class="product-card ${product.itemId}" style="text-transform:Capitalize;text-align:left;padding:1rem">
                                <img class="product-image" src="${product.imageLink[0]}" alt="Product 1">
                                <div class="product-name">${product.name}</div>
                                <div class="product-stock">Stock Left : ${product.stock}</div>
                                <div class="product-stock">Price : &#8377;${product.originalPrice}</div>
                                <div class="product-status">${ Date.parse(product.createdAt) >= Date.now() ? 'Scheduled' : 'Live'}</div>
                                <div class="product-actions">
                                    <button onclick="openEditModal('${product.itemId}')">Edit</button>
                                    <button onclick="deleteProduct('${product.itemId}')">Delete</button>
                                </div>
                            </div>
                            `
                            mainGrid.append(productDiv)
                        })
                        showAlert("All Products Loaded","success")

                    })
                    .catch( err => showAlert("Error fetching products data", "danger"))
                }
                document.querySelector('#inventoryTab').addEventListener('click', async () => {
                    loadAllProducts();
                });
            </script>
        </section>

        <section class="main" id="couponSection" style="display: none;">
            <section class="main-orders">
                <h1>Add/Delete Coupons</h1>

               <div class="coupon-container">
                <form id="couponForm">
                    <table>
                        <tr>
                            <th>Coupon Code</th>
                            <th>Discount Percentage</th>
                            <th>Validity Start</th>
                            <th>Validity End</th>
                            <th>Action</th>
                        </tr>
                        <tr>
                            <td>
                                <input type="text" id="couponCode" name="couponCode" placeholder="Enter coupon Code" required>
                            </td>
                            <td>
                                <input type="number" id="discountPercentage" name="discountPercentage" placeholder="Enter discount percentage"
                                    required min="1" max="100" style="width: 15vw;">
                            </td>
                            <td>
                                <input type="datetime-local" id="validityStart" name="validityStart" placeholder="Select validity start" required>
                            </td>
                            <td>
                                <input type="datetime-local" id="validityEnd" name="validityEnd" placeholder="Select validity end" required>
                            </td>
                            <td>
                                <button type="button" onclick="addCoupon()">Add Coupon</button>
                            </td>
                        </tr>
                    </table>
                </form>

                <div style="overflow: auto;height: 60vh;">
                    <h2 style="margin-top: 2rem;">Active Coupons</h2>
                    <table id="couponList">
                        <thead>
                            <tr>
                            <th>Coupon Name</th>
                            <th>Discount Percentage</th>
                            <th>Validity Start</th>
                            <th>Validity End</th>
                            <th>Action</th>
                            </tr>
                        </thead>
                        <tbody class="couponsTableBody">

                        </tbody>

                    </table>
                </div>
            </div>
            <script>
                async function addCoupon() {
                    const code = document.querySelector('#couponCode').value;
                    const discount = document.querySelector('#discountPercentage').value
                    const validityStart = document.querySelector('#validityStart').value
                    const validityEnds = document.querySelector('#validityEnd').value

                    if (code && discount && validityStart && validityEnds) {
                        await axios.post('/coupons',{code, discount, validityStart, validityEnds})
                        .then(response => {
                            console.log(response)
                            let row = document.createElement('tr')
                            row.classList.add(`code_${coupon.code}`)
                            row.innerHTML = `
                            <tr>
                                <td>${code}</td>
                                <td>${discount}%</td>
                                <td>${validityStart}</td>
                                <td>${validityEnds}</td>
                                <td><button onclick="deleteCoupon('${code}')">Delete</button></th>
                            </tr>
                            `
                            document.querySelector('.couponsTableBody').append(row)

                            document.querySelector('#couponCode').value = ''
                            document.querySelector('#discountPercentage').value = ''
                            document.querySelector('#validityStart').value = ''
                            document.querySelector('#validityEnd').value = ''

                            showAlert("coupon Added successfully","success")

                        })
                        .catch(err => showAlert('an error occured creating a coupon',"danger"))
                    }
                }
                async function deleteCoupon(code) {
                    await axios.delete(`/coupons/${code}`)
                    .then(response => {
                        console.log(response.data.message)
                        document.querySelector(`.code_${code}`).innerHTML = ''
                        showAlert("coupon deleted successfully","success")
                    })
                    .catch(err => showAlert("failed to delete coupon ","danger"))
                }
                document.querySelector('#couponTab').addEventListener('click', async () => {
                    await axios.get('/coupons')
                    .then(response => response.data)
                    .then(coupons => {
                        let body = document.querySelector('.couponsTableBody')
                        body.innerHTML = ''
                        coupons.forEach(coupon => {
                            let row = document.createElement('tr')
                            row.classList.add(`code_${coupon.code}`)
                            row.innerHTML = `
                            <tr>
                                <td>${coupon.code}</td>
                                <td>${coupon.discount}%</td>
                                <td>${coupon.validityStart}</td>
                                <td>${coupon.validityEnds}</td>
                                <td><button onclick="deleteCoupon('${coupon.code}')">Delete</button></th>
                            </tr>
                            `
                            body.append(row)
                            showAlert("coupons loaded successfully","success")        
                        })
                    })
                    .catch(err => showAlert("an error occured while fetching the coupons","danger"))
                })
            </script>
            </section>
        </section>

        <section class="main" id="historySection" style="display: none;">
            <section class="main-orders">
                <h1>View History</h1>

               <div class="coupon-container" style="padding: 0vh 0vh 0vh 2vh;">

                <div style="overflow: auto;height: 100%;overflow-y: scroll;padding-right: 1vh;">

                    <table id="couponList">
                        <thead>
                            <tr>
                            <th>Email</th>
                            <th>Date</th>
                            <th>Action</th>
                            </tr>
                        </thead>
                        <tbody class="adminHistoryTableBody">
                        </tbody>

                    </table>
                </div>
            </div>
            <script>
                function addLedgerRow(data){
                    const {email, dateTime, action} = data
                    const formattedDateTime = new Date(dateTime).toLocaleString();
                    let row = document.createElement('tr')
                    row.innerHTML = `
                    <tr>
                        <td>${email}</td>
                        <td>${formattedDateTime}</td>
                        <td>${action}</td>
                    </tr>
                    `
                    document.querySelector('.adminHistoryTableBody').append(row)
                }
                document.querySelector('#historyTab').addEventListener('click', async () => {
                    await axios.get('/adminActionHistory')
                    .then(response => response.data)
                    .then(ledger => {
                        showAlert("Admin history loaded successfully", "success")
                        document.querySelector('.adminHistoryTableBody').innerHTML=''
                        ledger.forEach(data => addLedgerRow(data))
                    })
                    .catch(err => showAlert("An error occured while fetching the history","danger"))
                })
            </script>
            </section>
        </section>

        <section class="main" id="contlo" style="display: none;">
            <section class="main-orders">
                <h1>Contlo Sync</h1>

               <div class="coupon-container" style="padding: 0vh 0vh 0vh 2vh;">

                <div style="overflow: auto;height: 100%;overflow-y: scroll;padding: 1vh;padding-right: 2vh;padding-top: 3vh;">
                    <div style="display: flex; flex-direction: column; align-items: center; justify-content: space-between; margin-bottom: 1rem; width: 100%;">

                        <input type="text" id="collection_id" placeholder="Collection ID" style="flex: 1; margin-bottom: 1rem; padding: 0.5rem; border: 1px solid #ccc; border-radius: 5px; width: 100%;">

                        <input type="text" id="collection_title" placeholder="Collection Name" style="flex: 1; margin-bottom: 1rem; padding: 0.5rem; border: 1px solid #ccc; border-radius: 5px; width: 100%;">

                        <button onclick="addNewContloCollection()" id="sendButton" style="padding: 0.5rem 1rem; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; width: 100%;">Create</button>

                    </div>

                </div>
            </div>

            <script>
                function addNewContloCollection() {
                    const id = document.getElementById("collection_id").value
                    const name = document.getElementById("collection_title").value

                    const url = "https://callback-service.contlo.com/api/collection/create?X-API-KEY=888a1070cd1541e424106639d7b9e4f3";

                    const payload = {
                        collection_id: id,
                        title: name
                    };

                    const config = {
                        headers: {
                            accept: "application/json",
                            "content-type": "application/json"
                        }
                    };

                    axios.post(url, payload, config)
                        .then((response) => {
                            console.log(response.data);
                            showAlert("successful","success")
                        })
                        .catch((error) => {
                            console.error(error);
                            showAlert("failed","danger")
                        });
                }
            </script>
            </section>
        </section>

  <%- include('partials/loader') %> 
  <script src="https://code.iconify.design/iconify-icon/1.0.7/iconify-icon.min.js"></script>

    </div>
    <script>
        let selectedSection = "analyticsSection";

        function selectSection(sectionName) {
            document.getElementById(selectedSection).style.display = "none";
            document.getElementById(sectionName).style.display = "block";
            selectedSection = sectionName;
        }
    </script>

</body>

</html>